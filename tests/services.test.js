const request = require("supertest");
const app = require("../app");
const sequelize = require("../config/database");
const User = require("../models/user");
const Service = require("../models/service");

describe("API Services", () => {
  let userId;

  // Cria um usu치rio antes de todos os testes
  beforeAll(async () => {
    await sequelize.sync({ force: true }); // for칞a recria칞칚o do banco
    const user = await User.create({
      name: "User Teste",
      email: "user@teste.com",
      password: "123456" // 游댐 senha obrigat칩ria por causa do hook do bcrypt
    });
    userId = user.id;
  });

  // Limpa tabela de servi칞os antes de cada teste
  beforeEach(async () => {
    await Service.destroy({ where: {} });
  });

  // Fecha conex칚o ap칩s todos os testes
  afterAll(async () => {
    await sequelize.close();
  });

  // --- CRUD b치sico ---

  it("deve criar um servi칞o", async () => {
    const res = await request(app)
      .post("/api/services")
      .send({ title: "Servi칞o Teste", description: "Descri칞칚o", userId });

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty("id");
    expect(res.body.title).toBe("Servi칞o Teste");
  });

  it("n칚o deve criar servi칞o com userId inexistente", async () => {
    const res = await request(app)
      .post("/api/services")
      .send({ title: "Inv치lido", description: "Desc", userId: 9999 });

    expect(res.statusCode).toBe(404);
    expect(res.body).toHaveProperty("message", "Usu치rio n칚o encontrado");
  });

  it("n칚o deve criar servi칞o sem title", async () => {
    const res = await request(app)
      .post("/api/services")
      .send({ description: "Sem t칤tulo", userId });

    expect(res.statusCode).toBe(400);
    expect(res.body.errors).toContain("O t칤tulo do servi칞o 칠 obrigat칩rio");
  });

  it("deve listar todos os servi칞os", async () => {
    await Service.create({ title: "Servi칞o 1", description: "Desc", userId });

    const res = await request(app).get("/api/services");
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    expect(res.body.length).toBeGreaterThan(0);
  });

  it("deve listar servi칞os de um usu치rio espec칤fico", async () => {
    await Service.create({ title: "Servi칞o Usu치rio", description: "Desc", userId });

    const res = await request(app).get(`/api/services/${userId}/services`);
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    res.body.forEach(service => expect(service.userId).toBe(userId));
  });

  it("deve listar um servi칞o espec칤fico", async () => {
    const service = await Service.create({ title: "Servi칞o 칔nico", description: "Desc", userId });

    const res = await request(app).get(`/api/services/${service.id}`);
    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty("id", service.id);
    expect(res.body).toHaveProperty("User");
    expect(res.body.User.id).toBe(userId);
  });

  it("deve atualizar um servi칞o", async () => {
    const service = await Service.create({ title: "Antigo", description: "Desc", userId });

    const res = await request(app)
      .put(`/api/services/${service.id}`)
      .send({ title: "Atualizado", description: "Nova Desc" });

    expect(res.statusCode).toBe(200);
    expect(res.body.title).toBe("Atualizado");
  });

  it("n칚o deve atualizar servi칞o para userId inexistente", async () => {
    const service = await Service.create({ title: "Servi칞o", description: "Desc", userId });

    const res = await request(app)
      .put(`/api/services/${service.id}`)
      .send({ userId: 9999 });

    expect(res.statusCode).toBe(404);
    expect(res.body).toHaveProperty("message", "Usu치rio n칚o encontrado");
  });

  it("deve deletar um servi칞o", async () => {
    const service = await Service.create({ title: "Excluir", description: "Desc", userId });

    const res = await request(app).delete(`/api/services/${service.id}`);
    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty("message", "Servi칞o deletado com sucesso");
  });

  it("n칚o deve deletar servi칞o inexistente", async () => {
    const res = await request(app).delete("/api/services/9999");
    expect(res.statusCode).toBe(404);
    expect(res.body).toHaveProperty("message", "Servi칞o n칚o encontrado");
  });
});
